name: Backend Deploy

on:
  push:
  # push:
  #   paths:
  #     - 'backend/**'
  # workflow_run:
  #   workflows: ["Backend Tests"]
  #   types:
  #     - completed
  #   branches:
  #     - main

jobs:
  deploy:
    # if: ${{ github.event.workflow_run.conclusion == 'success' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    environment: Production
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ap-northeast-1
      MYSQL_USER: ${{ secrets.MYSQL_USER }}
      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      MYSQL_DB_HOST: ${{ secrets.MYSQL_DB_HOST }}
      MYSQL_DB_PORT: ${{ secrets.MYSQL_DB_PORT }}
      MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
    steps:
      - uses: actions/checkout@v4

      - name: Debug AWS Credentials
        run: |
          echo "AWS_ACCESS_KEY_ID length: ${#AWS_ACCESS_KEY_ID}"
          echo "AWS_SECRET_ACCESS_KEY length: ${#AWS_SECRET_ACCESS_KEY}"
          echo "AWS_REGION: $AWS_REGION"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ai-sales-copy-generator-api
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd backend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Run database migrations
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ai-sales-copy-generator-api
          IMAGE_TAG: ${{ github.sha }}
        run: |
          aws ecs run-task \
            --cluster ai-sales-copy-generator \
            --task-definition ai-sales-copy-generator-migration \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-0a1234567890abcdef],securityGroups=[sg-0a1234567890abcdef]}" \
            --launch-type FARGATE \
            --overrides '{"containerOverrides": [{"name": "migration", "command": ["migrate", "-database", "mysql://${MYSQL_USER}:${MYSQL_PASSWORD}@tcp(${MYSQL_DB_HOST}:${MYSQL_DB_PORT})/${MYSQL_DATABASE}", "-path", "migrations", "up"]}]}'

      - name: Wait for migration to complete
        run: |
          aws ecs wait tasks-stopped \
            --cluster ai-sales-copy-generator \
            --tasks $(aws ecs list-tasks --cluster ai-sales-copy-generator --family ai-sales-copy-generator-migration --desired-status RUNNING --query 'taskArns[0]' --output text)

      - name: Update ECS service
        run: |
          aws ecs update-service --cluster ai-sales-copy-generator --service ai-sales-copy-generator-api --force-new-deployment 