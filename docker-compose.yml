services:
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: ${TARGET:-production}
    volumes:
      - ./backend:/api
      - ./mysql/my.cnf:/root/.my.cnf
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - backend/.env
    networks:
      - app-network
    profiles:
      - production
      - development

  api-test:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: test
    depends_on:
      test-db:
        condition: service_healthy
    environment:
      MYSQL_HOST: test-db
      MYSQL_PORT: 3306
      MYSQL_USER: test_user
      MYSQL_PASSWORD: test_pass
      MYSQL_DATABASE: test_db
      MYSQL_ROOT_PASSWORD: root
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - test-network
    profiles:
      - backend-test
      - frontend-test

  frontend-test:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_BASE_URL=http://api-test:8080
    depends_on:
      api-test:
        condition: service_healthy
    networks:
      - test-network
    profiles:
      - frontend-test

  db:
    image: mysql:8.0
    platform: linux/amd64
    container_name: ai_sales_copy_generator_db
    env_file:
      - backend/.env
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/my.cnf:/etc/mysql/conf.d/my.cnf
    ports:
      - "3306:3306"
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    profiles:
      - production
      - development

  test-db:
    image: mysql:8.0
    platform: linux/amd64
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: test_db
      MYSQL_USER: test_user
      MYSQL_PASSWORD: test_pass
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "test_user", "-ptest_pass" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - test-network
    profiles:
      - backend-test
      - frontend-test

volumes:
  mysql_data:

networks:
  app-network:
    driver: bridge
  test-network:
    driver: bridge
